
# Borrowed from future wake
def root /../ filterFn = jfind filterFn root
def jfind filterFn root =
  def helper node acc = match node
    JArray l =
      def tail = foldr helper acc l
      if filterFn node then node, tail else tail
    JObject l =
      def tail = foldr (helper _.getPairSecond _) acc l
      if filterFn node then node, tail else tail
    _ =
      if filterFn node then node, acc else acc
  helper root Nil | JArray

# Information needed to compile and link a driver into a program
# for a give compatibility string.
tuple DriverImplementation =
  global CompatibilityStrings: List String # This should match the DTS compatible property
  global Vendor:       String
  global DeviceName:   String
  global CFiles:       List Path
  global IncludeDirs:  List String
  global Visible:      List Path           # any extra files that must be visible

global def makeDriverImplementation compatibleDevices vendor deviceName driverSources includeDirs visible =
  DriverImplementation compatibleDevices vendor deviceName driverSources includeDirs visible

global topic driverImplementations: DriverImplementation

# get a list of compatible strings for each device in a given Path of a DTS JSON file
global target getCompatibleLists dtsJSON =
  def isDevice = match _
    JObject fields = exists (matches `compatible` _.getPairFirst) fields
    _ = False
  match dtsJSON.parseJSONFile
    Pass dtsJValue =
      dtsJValue
      | (_ /../ isDevice)
      | getJArray
      | getOrElse Nil
      | map (_ // `compatible`)
      | mapPartial getJArray
      | map getJString.mapPartial
    Fail e =
      def _ = printlnLevel logWarn "WARNING: Could not parse DTS JSON: {e.getErrorCause}"
      Nil
