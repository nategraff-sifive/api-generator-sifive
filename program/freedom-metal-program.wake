tuple FreedomMakeAttributes =
  global File:   Path
  global MARCH:  String
  global MABI:   String
  global CMODEL: String

#########################################################
# runFreedomMakeAttributesGenerator
#
# Wraps the esdk-settings-generator and produces both
# the Makefile fragment for augmenting the build of
# Freedom Metal, but extracts the ABI, arch, and code
# model to pass to the compiler.
#
# Arguments:
#  - options: created by makeESDKSettingsGeneratorOptions
#
#########################################################
global def runFreedomMakeAttributesGenerator options =
  def attributes =
    options
    | runESDKSettingsGenerator
    | getJobOutput

  def rlines = read attributes | rmap `\n`.tokenize
  match rlines
    Pass lines =
      def getAttribute attribute =
        def regex = regExpCat (`^`, attribute, ` = (.*)$`, Nil)
        lines
        | map regex.extract
        | flatten
        | head
      match `RISCV_ABI`.getAttribute `RISCV_ARCH`.getAttribute `RISCV_CMODEL`.getAttribute
        (Some mabi) (Some march) (Some cmodel) = Pass (FreedomMakeAttributes attributes march mabi cmodel)
        _ _ _ = Fail "Generated make attributes file not formatted correctly: {attributes.getPathName}".makeError
    Fail fail = Fail fail

tuple FreedomBSP =
  global LinkerScript:   Path
  global Header:         Path
  global InlineHeader:   Path
  global PlatformHeader: Path
  global Attributes:     FreedomMakeAttributes

global def makeFreedomBSP coreDTS customOverlay type prefix machineName =
  def installedCoreDTS = installIn prefix coreDTS

  # Generate the overlay
  def designDTSName = "{prefix}/{machineName}-design.dts"
  def designDTS =
    match customOverlay
      Some overlay =
        # Add installedCoreDTS to the include list in the overlay
        def coreFilename = installedCoreDTS.getPathName
        def list = coreFilename, Nil ++ overlay.getDevicetreeCustomOverlayIncludes
        overlay
        | setDevicetreeCustomOverlayIncludes list
        | (writeDevicetreeCustomOverlay designDTSName _)
      None =
        makeDevicetreeOverlayGeneratorOptions installedCoreDTS Nil type designDTSName
        | runDevicetreeOverlayGenerator
        | getJobOutput

  # Create the DTB for the header generators
  def designDTB = dtsTodtb designDTS (installedCoreDTS, Nil) "{prefix}/{machineName}.dtb"

  # Run the header generators
  def header =
    makeFreedomMetalHeaderGeneratorOptions designDTB "{prefix}/{machineName}.h"
    | runFreedomMetalHeaderGenerator

  def platformHeader =
    makeFreedomBareHeaderGeneratorOptions designDTB "{prefix}/{machineName}-platform.h"
    | runFreedomBareHeaderGenerator

  # Run linker script generator
  def linkerScript =
    makeLdScriptGeneratorOptions designDTS (installedCoreDTS, Nil) LDSCRIPT_DEFAULT "{prefix}/{machineName}.lds"
    | runLdScriptGenerator
    | getJobOutput

  # Create the settings for the Makefile
  def attributesResult =
    makeESDKSettingsGeneratorOptions designDTS (installedCoreDTS, Nil) type "{prefix}/{machineName}.mk"
    | runFreedomMakeAttributesGenerator

  attributesResult |
  rmap (\attributes
  FreedomBSP
  linkerScript
  header.getFreedomMetalHeaderGeneratorOutputsHeader
  header.getFreedomMetalHeaderGeneratorOutputsInlineHeader
  platformHeader
  attributes
  )

global def generateMetalFromDts dts machineName customOverlay type outputDir =
  def prefix = "{outputDir}/{machineName}"
  def bsp = makeFreedomBSP dts customOverlay type outputDir machineName
  def runMetalInstall bsp =
    def attributes = bsp.getFreedomBSPAttributes
    makeFreedomMetalConfigureOptions
    attributes.getFreedomMakeAttributesMARCH
    attributes.getFreedomMakeAttributesMABI
    attributes.getFreedomMakeAttributesCMODEL
    "riscv64-unknown-elf"
    outputDir
    machineName
    bsp.getFreedomBSPHeader
    bsp.getFreedomBSPInlineHeader
    bsp.getFreedomBSPPlatformHeader
    bsp.getFreedomBSPLinkerScript
    | runFreedomMetalInstall
  rmap runMetalInstall bsp

global def makeFreedomMetalProgram metalInstall gccProgramPlan =
  def march = metalInstall.getMachineExecutionEnvironmentRISCV_ARCH
  def mabi = metalInstall.getMachineExecutionEnvironmentRISCV_ABI
  def cmodel = metalInstall.getMachineExecutionEnvironmentRISCV_CMODEL
  def includeDir = metalInstall.getMachineExecutionEnvironmentIncludeDir
  def withASFlags =
    "-march={march}", "-mabi={mabi}", "-I{includeDir}", _
  def withCFlags =
    "-march={march}", "-mabi={mabi}", "-mcmodel={cmodel}", "-I{includeDir}", _
  def withLdFlags =
    def fileName = extract `([^/]*/)*lib([^/]*)\.a` _.getPathName | at 1
    def metal =
      metalInstall.getMachineExecutionEnvironmentLibMetal.fileName
      | omap ("-l{_}", Nil)
      | getOrElse Nil
    def metalGloss =
      metalInstall.getMachineExecutionEnvironmentLibMetalGloss.fileName
      | omap ("-l{_}", Nil)
      | getOrElse Nil
    def libDir = metalInstall.getMachineExecutionEnvironmentLibDir
    "-nostartfiles", "-nostdlib", "-L{libDir}", "-lc", "-lgcc", metal
    ++ metalGloss
    ++ _

  gccProgramPlan
  | setGCCProgramPlanResources defaultSiFiveRISCVResources
  | editGCCProgramPlanSources (metalInstall.getMachineExecutionEnvironmentAllOutputs ++ _)
  | editGCCProgramPlanASFlags withASFlags
  | editGCCProgramPlanCFlags  withCFlags
  | editGCCProgramPlanLDFlags withLdFlags
  | linkFreedomMetalProgram metalInstall
  | makeGCCProgram


publish rocketChipDUTrogramCompilers = freedomMetalDUTProgramCompiler, Nil

global def freedomMetalDUTProgramCompiler =
  def name         = "freedom-metal-dut-program-compiler"
  def stdlib       = "freedom-metal"
  def toolchain    = "riscv64-unknown-elf"
  def memoryRegion = "sram"
  def score        = (\_ \_ 1.0) # TODO

  def imp dut programCompileOptions =
    # collect generated/published driver sources
    def driverImpFiles = getDriverImplementationsForDUT dut
    def baseHeaderFiles = getBaseHeaderForDUT dut outputDir
    def driverCFiles =
      mapFlat getDriverImplementationCFiles driverImpFiles
      ++ mapFlat getDriverOutputCFiles baseHeaderFiles
      | distinctBy (scmp _.getPathName _.getPathName)
    def driverIncludes =
      mapFlat getDriverImplementationIncludeDirs driverImpFiles
      ++ mapFlat getDriverOutputIncludeDirs baseHeaderFiles
      | map simplify
      | distinctBy scmp
    def driverSources =
      mapFlat getDriverImplementationVisible driverImpFiles
      ++ mapFlat getDriverOutputSources baseHeaderFiles
      | distinctBy (scmp _.getPathName _.getPathName)

    def outputDir = programCompileOptions.getProgramCompileOptionsOutputDir
    def type = dut.getDUTFPGABoardOpt | getOrElse "rtl"
    def installDir = "build/freedom-metal/{dut.getDUTName}"
    def metalInstall =
      generateMetalFromDts dut.getRocketChipDUTDTS dut.getDUTName dut.getDUTCustomOverlay type installDir
    def gccProgramPlan =
      def outputFile = "{outputDir}/{programCompileOptions.getProgramCompileOptionsName}.elf"
      def newCFiles =
        driverCFiles ++ programCompileOptions.getProgramCompileOptionsCFiles
      def newIncludes =
        driverIncludes ++
        programCompileOptions.getProgramCompileOptionsIncludeDirs
      def newCompileOptions =
        programCompileOptions
        | setProgramCompileOptionsCFiles newCFiles
        | setProgramCompileOptionsIncludeDirs newIncludes
      programCompileOptionsToGCCProgramPlan outputFile newCompileOptions
      | setGCCProgramPlanSources driverSources
    def binary =
      def outputFile = "{outputDir}/{programCompileOptions.getProgramCompileOptionsName}.bin"
      metalInstall
      | rmap (makeFreedomMetalProgram _ gccProgramPlan)
      | rmap (riscv64UnknownElfObjcopy _ outputFile)
      | getPass
      | getOrElse "{name}: failed to compile binary".makeError.makeBadPath
    makeProgram binary

  makeProgramCompilerPlan name stdlib toolchain memoryRegion score imp
  | makeProgramCompiler


global def linkFreedomMetalProgram metalInstall gccProgramPlan =
  gccProgramPlan
  | setGCCProgramPlanResources defaultSiFiveRISCVResources
  | setGCCProgramPlanHost (Some metalInstall.getMachineExecutionEnvironmentHost)
  | setGCCProgramPlanLinkerScript (Some metalInstall.getMachineExecutionEnvironmentLdScript)
